{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GaneshSurna\\\\Desktop\\\\react-router\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventDetails.js\",\n  _s = $RefreshSig$();\nimport { useRouteLoaderData, json, redirect, defer } from 'react-router-dom';\nimport EventItem from '../components/EventItem';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventDetailsPage() {\n  _s();\n  const data = useRouteLoaderData('event-details');\n  return /*#__PURE__*/_jsxDEV(EventItem, {\n    event: data.event\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this);\n}\n_s(EventDetailsPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailsPage;\nexport default EventDetailsPage;\nconst loadedEvent = async id => {\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.event;\n  }\n};\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: \"Couldn't fetch events!\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n};\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  return defer({\n    event: await loadEvent(id),\n    events: await loadEvents()\n  });\n}\nexport async function action({\n  params,\n  request\n}) {\n  const eventId = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete event.'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailsPage\");","map":{"version":3,"names":["useRouteLoaderData","json","redirect","defer","EventItem","EventsList","jsxDEV","_jsxDEV","EventDetailsPage","_s","data","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadedEvent","id","response","fetch","ok","message","status","resData","loadEvents","events","loader","request","params","eventId","loadEvent","action","method","$RefreshReg$"],"sources":["C:/Users/GaneshSurna/Desktop/react-router/12-adv-starting-project/frontend/src/pages/EventDetails.js"],"sourcesContent":["\r\nimport { useRouteLoaderData, json, redirect, defer } from 'react-router-dom';\r\n\r\nimport EventItem from '../components/EventItem';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventDetailsPage() {\r\n  const data = useRouteLoaderData('event-details');\r\n\r\n  return <EventItem event={data.event} />;\r\n}\r\n\r\nexport default EventDetailsPage;\r\n\r\nconst loadedEvent= async (id)=>{\r\n    const response = await fetch('http://localhost:8080/events/' + id);\r\n\r\n    if (!response.ok) {\r\n        throw json(\r\n        { message: 'Could not fetch details for selected event.' },\r\n        {\r\n            status: 500,\r\n        }\r\n        );\r\n    } else {\r\n        const resData= await response.json();\r\n        return resData.event;\r\n    }\r\n};\r\n\r\nconst loadEvents= async ()=>{\r\n    const response = await fetch('http://localhost:8080/events');\r\n  \r\n          if (!response.ok){\r\n  \r\n            throw json({message:\"Couldn't fetch events!\"},{status:500});\r\n  \r\n          } else {\r\n            const resData = await response.json();\r\n            return resData.events;\r\n          }\r\n  };\r\n\r\nexport async function loader({ request, params }) {\r\n  const id = params.eventId;\r\n\r\n  return defer({\r\n    event: await loadEvent(id),\r\n    events: await loadEvents(),\r\n  })\r\n}\r\n\r\nexport async function action({ params, request }) {\r\n  const eventId = params.eventId;\r\n  const response = await fetch('http://localhost:8080/events/' + eventId, {\r\n    method: request.method,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: 'Could not delete event.' },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  }\r\n  return redirect('/events');\r\n}"],"mappings":";;AACA,SAASA,kBAAkB,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,kBAAkB;AAE5E,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAMC,IAAI,GAAGV,kBAAkB,CAAC,eAAe,CAAC;EAEhD,oBAAOO,OAAA,CAACH,SAAS;IAACO,KAAK,EAAED,IAAI,CAACC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzC;AAACN,EAAA,CAJQD,gBAAgB;EAAA,QACVR,kBAAkB;AAAA;AAAAgB,EAAA,GADxBR,gBAAgB;AAMzB,eAAeA,gBAAgB;AAE/B,MAAMS,WAAW,GAAE,MAAOC,EAAE,IAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGF,EAAE,CAAC;EAElE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IACd,MAAMpB,IAAI,CACV;MAAEqB,OAAO,EAAE;IAA8C,CAAC,EAC1D;MACIC,MAAM,EAAE;IACZ,CACA,CAAC;EACL,CAAC,MAAM;IACH,MAAMC,OAAO,GAAE,MAAML,QAAQ,CAAClB,IAAI,CAAC,CAAC;IACpC,OAAOuB,OAAO,CAACb,KAAK;EACxB;AACJ,CAAC;AAED,MAAMc,UAAU,GAAE,MAAAA,CAAA,KAAU;EACxB,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAEtD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAC;IAEf,MAAMpB,IAAI,CAAC;MAACqB,OAAO,EAAC;IAAwB,CAAC,EAAC;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EAE7D,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAAClB,IAAI,CAAC,CAAC;IACrC,OAAOuB,OAAO,CAACE,MAAM;EACvB;AACR,CAAC;AAEH,OAAO,eAAeC,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAChD,MAAMX,EAAE,GAAGW,MAAM,CAACC,OAAO;EAEzB,OAAO3B,KAAK,CAAC;IACXQ,KAAK,EAAE,MAAMoB,SAAS,CAACb,EAAE,CAAC;IAC1BQ,MAAM,EAAE,MAAMD,UAAU,CAAC;EAC3B,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeO,MAAMA,CAAC;EAAEH,MAAM;EAAED;AAAQ,CAAC,EAAE;EAChD,MAAME,OAAO,GAAGD,MAAM,CAACC,OAAO;EAC9B,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGU,OAAO,EAAE;IACtEG,MAAM,EAAEL,OAAO,CAACK;EAClB,CAAC,CAAC;EAEF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMpB,IAAI,CACR;MAAEqB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH;EACA,OAAOrB,QAAQ,CAAC,SAAS,CAAC;AAC5B;AAAC,IAAAc,EAAA;AAAAkB,YAAA,CAAAlB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}